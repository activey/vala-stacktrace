/* vala-stacktrace-2.0.h generated by valac 0.28.0, the Vala compiler, do not modify */


#ifndef __SRC_LIBRARY_C_VALA_STACKTRACE_2_0_H__
#define __SRC_LIBRARY_C_VALA_STACKTRACE_2_0_H__

#include <glib.h>
#include <glib-object.h>
#include <gee.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define TYPE_STACKTRACE (stacktrace_get_type ())
#define STACKTRACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_STACKTRACE, Stacktrace))
#define STACKTRACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_STACKTRACE, StacktraceClass))
#define IS_STACKTRACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_STACKTRACE))
#define IS_STACKTRACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_STACKTRACE))
#define STACKTRACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_STACKTRACE, StacktraceClass))

typedef struct _Stacktrace Stacktrace;
typedef struct _StacktraceClass StacktraceClass;
typedef struct _StacktracePrivate StacktracePrivate;

#define STACKTRACE_TYPE_FRAME (stacktrace_frame_get_type ())
#define STACKTRACE_FRAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), STACKTRACE_TYPE_FRAME, StacktraceFrame))
#define STACKTRACE_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), STACKTRACE_TYPE_FRAME, StacktraceFrameClass))
#define STACKTRACE_IS_FRAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), STACKTRACE_TYPE_FRAME))
#define STACKTRACE_IS_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), STACKTRACE_TYPE_FRAME))
#define STACKTRACE_FRAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), STACKTRACE_TYPE_FRAME, StacktraceFrameClass))

typedef struct _StacktraceFrame StacktraceFrame;
typedef struct _StacktraceFrameClass StacktraceFrameClass;

#define STACKTRACE_TYPE_STYLE (stacktrace_style_get_type ())

#define STACKTRACE_TYPE_CRITICAL_HANDLER (stacktrace_critical_handler_get_type ())

#define STACKTRACE_TYPE_COLOR (stacktrace_color_get_type ())
typedef struct _StacktraceFramePrivate StacktraceFramePrivate;

struct _Stacktrace {
	GTypeInstance parent_instance;
	volatile int ref_count;
	StacktracePrivate * priv;
	GeeArrayList* _frames;
};

struct _StacktraceClass {
	GTypeClass parent_class;
	void (*finalize) (Stacktrace *self);
};

typedef enum  {
	STACKTRACE_STYLE_RESET = 0,
	STACKTRACE_STYLE_BRIGHT = 1,
	STACKTRACE_STYLE_DIM = 2,
	STACKTRACE_STYLE_UNDERLINE = 3,
	STACKTRACE_STYLE_BLINK = 4,
	STACKTRACE_STYLE_REVERSE = 7,
	STACKTRACE_STYLE_HIDDEN = 8
} StacktraceStyle;

typedef enum  {
	STACKTRACE_CRITICAL_HANDLER_IGNORE,
	STACKTRACE_CRITICAL_HANDLER_PRINT_STACKTRACE,
	STACKTRACE_CRITICAL_HANDLER_CRASH
} StacktraceCriticalHandler;

typedef enum  {
	STACKTRACE_COLOR_BLACK = 0,
	STACKTRACE_COLOR_RED = 1,
	STACKTRACE_COLOR_GREEN = 2,
	STACKTRACE_COLOR_YELLOW = 3,
	STACKTRACE_COLOR_BLUE = 4,
	STACKTRACE_COLOR_MAGENTA = 5,
	STACKTRACE_COLOR_CYAN = 6,
	STACKTRACE_COLOR_WHITE = 7
} StacktraceColor;

struct _StacktraceFrame {
	GTypeInstance parent_instance;
	volatile int ref_count;
	StacktraceFramePrivate * priv;
};

struct _StacktraceFrameClass {
	GTypeClass parent_class;
	void (*finalize) (StacktraceFrame *self);
};


gpointer stacktrace_ref (gpointer instance);
void stacktrace_unref (gpointer instance);
GParamSpec* param_spec_stacktrace (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_stacktrace (GValue* value, gpointer v_object);
void value_take_stacktrace (GValue* value, gpointer v_object);
gpointer value_get_stacktrace (const GValue* value);
GType stacktrace_get_type (void) G_GNUC_CONST;
gpointer stacktrace_frame_ref (gpointer instance);
void stacktrace_frame_unref (gpointer instance);
GParamSpec* stacktrace_param_spec_frame (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void stacktrace_value_set_frame (GValue* value, gpointer v_object);
void stacktrace_value_take_frame (GValue* value, gpointer v_object);
gpointer stacktrace_value_get_frame (const GValue* value);
GType stacktrace_frame_get_type (void) G_GNUC_CONST;
GType stacktrace_style_get_type (void) G_GNUC_CONST;
GType stacktrace_critical_handler_get_type (void) G_GNUC_CONST;
GType stacktrace_color_get_type (void) G_GNUC_CONST;
Stacktrace* stacktrace_new (int sig);
Stacktrace* stacktrace_construct (GType object_type, int sig);
gchar* stacktrace_get_relative_path (const gchar* p_fullDestinationPath, const gchar* p_startPath);
gchar* stacktrace_extract_line (const gchar* line);
void stacktrace_print (Stacktrace* self);
void stacktrace_register_handlers (void);
void stacktrace_handler (gint sig);
gboolean stacktrace_get_enabled (void);
void stacktrace_set_enabled (gboolean value);
gboolean stacktrace_get_hide_installed_libraries (void);
void stacktrace_set_hide_installed_libraries (gboolean value);
StacktraceColor stacktrace_get_default_highlight_color (void);
void stacktrace_set_default_highlight_color (StacktraceColor value);
StacktraceColor stacktrace_get_default_error_background (void);
void stacktrace_set_default_error_background (StacktraceColor value);
StacktraceColor stacktrace_get_highlight_color (Stacktrace* self);
void stacktrace_set_highlight_color (Stacktrace* self, StacktraceColor value);
StacktraceColor stacktrace_get_error_background (Stacktrace* self);
void stacktrace_set_error_background (Stacktrace* self, StacktraceColor value);
GeeArrayList* stacktrace_get_frames (Stacktrace* self);
gboolean stacktrace_get_is_custom (Stacktrace* self);
StacktraceCriticalHandler stacktrace_get_critical_handling (void);
void stacktrace_set_critical_handling (StacktraceCriticalHandler value);
StacktraceFrame* stacktrace_frame_new (const gchar* address, const gchar* line, const gchar* function, const gchar* file_path, const gchar* file_short_path);
StacktraceFrame* stacktrace_frame_construct (GType object_type, const gchar* address, const gchar* line, const gchar* function, const gchar* file_path, const gchar* file_short_path);
gchar* stacktrace_frame_to_string (StacktraceFrame* self);
const gchar* stacktrace_frame_get_address (StacktraceFrame* self);
const gchar* stacktrace_frame_get_line (StacktraceFrame* self);
const gchar* stacktrace_frame_get_line_number (StacktraceFrame* self);
const gchar* stacktrace_frame_get_file_path (StacktraceFrame* self);
const gchar* stacktrace_frame_get_file_short_path (StacktraceFrame* self);
const gchar* stacktrace_frame_get_function (StacktraceFrame* self);


G_END_DECLS

#endif
